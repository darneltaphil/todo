{"version":3,"sources":["components/contexts/Context.js","components/TodoForm.js","components/Todo.js","components/TodoList.js","components/ThemeSwitcher.js","App.js","index.js"],"names":["Context","createContext","bg","color","settingBg","settingColor","TodoForm","addTodo","AppContext","useContext","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","Math","random","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","ThemeSwitcher","props","LOCAL_STORAGE_KEY","App","setTodos","setBg","setColor","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","Provider","param","padding","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8f82409.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const Context = createContext({\r\n  bg : 'light',\r\n  color : 'dark',\r\n  settingBg: () => { }, \r\n  settingColor: () => { }, \r\n})\r\n ","import React, { useState, useContext } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { Context } from './contexts/Context'\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const AppContext = useContext(Context)\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    task: \"\",\r\n    completed: false\r\n  });\r\n\r\n  function handleTaskInputChange(e) {\r\n    // e.target.value contains new input from onChange\r\n    // event for input elements\r\n    setTodo({ ...todo, task: e.target.value });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault(); // prevents browser refresh\r\n    // trim() gets rid of string whitespace\r\n    if (todo.task.trim()) {\r\n      addTodo({ ...todo, id: Math.random() });\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      <TextField\r\n        label=\"Task\"\r\n        type=\"text\"\r\n        name=\"task\"\r\n        value={todo.task}\r\n        onChange={handleTaskInputChange}\r\n      />\r\n      <Button type=\"submit\" className={`text-${AppContext.bg === \"dark\" ? \"white\" : \"dark\"} p-2  `}>Submit</Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from \"react\";\r\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Context } from './contexts/Context'\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n  const AppContext = useContext(Context)\r\n\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo.id);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox \r\n          checked={todo.completed} \r\n          onClick={handleCheckboxClick}  \r\n          className={`text-${AppContext.bg === \"dark\" ? \"light\" : \"\"}  `}\r\n           />\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </Typography>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <CloseIcon  className={`text-${AppContext.bg === \"dark\" ? \"secondary\" : \"dark\"}  `}/>\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { List } from \"@material-ui/core\";\r\n\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\r\n\r\n  return (\r\n    <List>\r\n      {todos.map(todo => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          removeTodo={removeTodo}\r\n          toggleComplete={toggleComplete}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useContext } from \"react\"\r\nimport {Context} from \"./contexts/Context\"\r\n//import Image from \"./undraw_dark_mode_2xam.png\"\r\n// import Sun from \"../images/sun.svg\"\r\n\r\nfunction ThemeSwitcher(props) {\r\n  const AppContext = useContext(Context)\r\n\r\n  const handleThemeChange = () => {\r\n    if( AppContext.bg === \"dark\"){\r\n             AppContext.settingBg('dark') \r\n    }else{\r\n            AppContext.settingBg('light') \r\n    }\r\n    if( AppContext.color === \"white\"){\r\n             AppContext.settingColor('white') \r\n    }else{\r\n            AppContext.settingColor('') \r\n    }\r\n     \r\n}\r\n  return ( \r\n      \r\n    <div \r\n        onClick={handleThemeChange}\r\n        className={`bg-${AppContext.bg === \"dark\" ? \"dark\" : \"light\"} p-2 text-${AppContext.color} `}\r\n    >\r\n           {AppContext.bg === \"dark\" ? 'Go Light' : \"Go Dark\"} \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ThemeSwitcher","import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Context} from \"./components/contexts/Context\"\r\nimport ThemeSwitcher from \"./components/ThemeSwitcher\";\r\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]); \r\n  \r\n  const AppContext = useContext(Context);\r\n  const [bg, setBg] = useState(AppContext.bg);\r\n  const [color, setColor] = useState(AppContext.color);\r\n\r\n  const ChangeBackground =(param) => {\r\n    param === \"dark\" ? setBg('light') : setBg('dark');\r\n  }\r\n  const changeColor =(param) => {\r\n    param === \"white\" ? setColor('dark') : setColor('white');\r\n  }\r\n\r\n  useEffect(() => {\r\n    // fires when app component mounts to the DOM\r\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n    if (storageTodos) {\r\n      setTodos(storageTodos);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    // fires when todos array gets updated\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function addTodo(todo) {\r\n    // adds new todo to beginning of todos array\r\n    setTodos([todo, ...todos]);\r\n  }\r\n\r\n  function toggleComplete(id) {\r\n    setTodos(\r\n      todos.map(todo => { \r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed\r\n          };\r\n        }\r\n            return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <Context.Provider\r\n                      value={{\r\n                    bg : bg,\r\n                    color : color,\r\n                    settingBg: ChangeBackground ,\r\n                    settingColor: changeColor \r\n                    }} \r\n                    >\r\n        <div className={`App bg-${bg} text-${color}`}>\r\n      <ThemeSwitcher  />\r\n          <div className='bg-success p-3 card text-white'>\r\n          <Typography style={{ padding: 16 }} variant=\"caption\">\r\n            This app was built as part of the <br/>fulfilment of conditions to be <br/>considered for the Soronko Mentorship position<br/>\r\n            <em>Kofi Arnold Akpadji</em>\r\n          </Typography>\r\n          </div>\r\n          <Typography style={{ padding: 16 }} variant=\"h1\">\r\n            ToDo \r\n          </Typography>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleComplete={toggleComplete}\r\n          />\r\n        </div>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}