{"version":3,"sources":["components/contexts/Context.js","components/TodoForm.js","components/Todo.js","components/TodoList.js","components/ThemeSwitcher.js","App.js","index.js"],"names":["Context","createContext","bg","color","settingBg","settingColor","TodoForm","addTodo","AppContext","useContext","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","Math","random","style","display","flexDirection","justifyContent","TextField","label","type","name","value","onChange","target","Button","title","icon","faPlus","variant","Todo","toggleComplete","removeTodo","ListItem","Checkbox","checked","onClick","textDecoration","width","IconButton","faTrashAlt","TodoList","todos","List","map","ThemeSwitcher","props","faPlusCircle","faSun","size","faMoon","LOCAL_STORAGE_KEY","App","setTodos","setBg","setColor","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","Provider","param","Typography","padding","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27fd6e06.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const Context = createContext({\r\n  bg : 'light',\r\n  color : 'dark',\r\n  settingBg: () => { }, \r\n  settingColor: () => { }, \r\n})\r\n ","import React, { useState, useContext } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { Context } from './contexts/Context'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {  faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const AppContext = useContext(Context)\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    task: \"\",\r\n    completed: false\r\n  });\r\n\r\n  function handleTaskInputChange(e) {\r\n    // e.target.value contains new input from onChange\r\n    // event for input elements\r\n    setTodo({ ...todo, task: e.target.value });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault(); // prevents browser refresh\r\n    // trim() gets rid of string whitespace\r\n    if (todo.task.trim()) {\r\n      addTodo({ ...todo, id: Math.random() });\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"todo-form card-header\" onSubmit={handleSubmit} style={{ display: \"flex\",   flexDirection: 'row',   justifyContent: 'center'  }}>\r\n      <TextField\r\n        label=\"Task\"\r\n        type=\"text\"\r\n        name=\"task\"\r\n        value={todo.task}\r\n        onChange={handleTaskInputChange}\r\n      />\r\n      <Button type=\"submit\" className={`text-${AppContext.bg === \"dark\" ? \"white\" : \"dark\"} p-2  `}>\r\n        <FontAwesomeIcon title='Add' icon={faPlus} variant='primary' /> \r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from \"react\";\r\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\n// import CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Context } from './contexts/Context'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {  faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n  const AppContext = useContext(Context)\r\n\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo.id);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\"}}>\r\n      <Checkbox \r\n          checked={todo.completed} \r\n          onClick={handleCheckboxClick}  \r\n          className={`text-${AppContext.bg === \"dark\" ? \"light\" : \"\"}  `}\r\n      />\r\n      <div\r\n        variant=\"p\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null,\r\n          width : '75%'\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </div>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <FontAwesomeIcon icon={faTrashAlt}  className={`text-${AppContext.bg === \"dark\" ? \"secondary\" : \"dark\"}  `} />\r\n        {/* <CloseIcon  className={`text-${AppContext.bg === \"dark\" ? \"secondary\" : \"dark\"}  `}/> */}\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { List } from \"@material-ui/core\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\r\n\r\n  return (\r\n    <List>\r\n      {todos.map(todo => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          removeTodo={removeTodo}\r\n          toggleComplete={toggleComplete}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useContext } from \"react\"\r\nimport {Context} from \"./contexts/Context\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {  faMoon, faPlusCircle, faSun } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\n\r\nfunction ThemeSwitcher(props) {\r\n  const AppContext = useContext(Context)\r\n\r\n  const handleThemeChange = () => {\r\n    if( AppContext.bg === \"dark\"){\r\n             AppContext.settingBg('dark') \r\n    }else{\r\n            AppContext.settingBg('light') \r\n    }\r\n    if( AppContext.color === \"white\"){\r\n             AppContext.settingColor('white') \r\n    }else{\r\n            AppContext.settingColor('') \r\n    }\r\n     \r\n}\r\n  return ( \r\n      \r\n    <div icon={faPlusCircle} \r\n        onClick={handleThemeChange}\r\n        className={`bg-${AppContext.bg === \"dark\" ? \"dark\" : \"light\"} p-2 text-${AppContext.color} `}\r\n    >    \r\n         {AppContext.bg === \"dark\" ? <><FontAwesomeIcon icon={faSun} size=\"\" />  Go Light</> : <><FontAwesomeIcon icon={faMoon} size=\"\" />  Go Dark</>} \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ThemeSwitcher","import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Context} from \"./components/contexts/Context\"\r\nimport ThemeSwitcher from \"./components/ThemeSwitcher\";\r\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]); \r\n  \r\n  const AppContext = useContext(Context);\r\n  const [bg, setBg] = useState(AppContext.bg);\r\n  const [color, setColor] = useState(AppContext.color);\r\n\r\n  const ChangeBackground =(param) => {\r\n    param === \"dark\" ? setBg('light') : setBg('dark');\r\n  }\r\n  const changeColor =(param) => {\r\n    param === \"white\" ? setColor('dark') : setColor('white');\r\n  }\r\n\r\n  useEffect(() => {\r\n    // fires when app component mounts to the DOM\r\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n    if (storageTodos) {\r\n      setTodos(storageTodos);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    // fires when todos array gets updated\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function addTodo(todo) {\r\n    // adds new todo to beginning of todos array\r\n    setTodos([todo, ...todos]);\r\n  }\r\n\r\n  function toggleComplete(id) {\r\n    setTodos(\r\n      todos.map(todo => { \r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed\r\n          };\r\n        }\r\n            return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <Context.Provider\r\n                      value={{\r\n                    bg : bg,\r\n                    color : color,\r\n                    settingBg: ChangeBackground ,\r\n                    settingColor: changeColor \r\n                    }} \r\n                    >\r\n                     \r\n        <div className={`App bg-${bg} text-${color}`}>\r\n       <div className='container col-lg-4 '>\r\n      <ThemeSwitcher  />\r\n          <div className='bg-success p-3 card text-white'>\r\n          <Typography style={{ padding: 0 }} variant=\"caption\">\r\n            This app was built as part of the <br/>fulfilment of conditions to be <br/>considered for the Soronko Mentorship position<br/>\r\n            <em>Kofi Arnold Akpadji</em>\r\n          </Typography>\r\n          </div>\r\n          <Typography style={{ padding: 16 }} variant=\"h1\">\r\n            ToDo List\r\n          </Typography>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleComplete={toggleComplete}\r\n          />\r\n        </div>\r\n        </div>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}